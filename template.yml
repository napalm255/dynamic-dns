---
AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31
Description: Python Webservice for Dynamic DNS

Parameters:
  ProjectId:
    Type: String
    Description: ProjectId used to associate resources
  apiHost:
    Type: String
    Description: Api Gateway Host
  apiBasePath:
    Type: String
    Description: Api Gateway Base Path

Resources:
  LambdaTrustRole:
    Type: AWS::IAM::Role
    Description: Creating service role in IAM for AWS Lambda
    Properties:
      RoleName: !Sub ${ProjectId}-LambdaTrustRole
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole'
        # TODO: limit access
        - 'arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonRoute53FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator'
      Path: /
      Policies:
        - PolicyName: !Sub ${ProjectId}-LambdaTrustRolePolicy
          PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: '*'
            Version: 2012-10-17

#  LambdaFunction:
#    Type: AWS::Lambda::Function
#    FunctionName: !Sub ${ProjectId}-lambda
#    Description: !Sub ${ProjectId} Lambda Function
#    Handler: index.handler
#    Runtime: python3.6
#    Timeout: 15
#    Role: !GetAtt LambdaTrustRole.Arn

#  LambdaFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      FunctionName: !Sub ${ProjectId}-lambda
#      Description: !Sub ${ProjectId} Lambda Function
#      Handler: index.handler
#      Runtime: python3.6
#      CodeUri: ./
#      Timeout: 15
#      Policies:
#        - AWSLambdaBasicExecutionRole
#        - AmazonSSMReadOnlyAccess
#        - AmazonRoute53FullAccess
#        - AmazonAPIGatewayAdministrator
#      Events:
#        PostEvent:
#          Type: Api
#          Properties:
#            Path: /
#            Method: post
#            RestApiId: !Ref ApiGateway
#
#  ApiGateway:
#    Type: AWS::Serverless::Api
#    DependsOn: LambdaFunction
#    Properties:
#      StageName: Prod
#      DefinitionBody:
#        swagger: "2.0"
#        info:
#          version: "1.0"
#          title: !Sub ${ProjectId}-api
#        host: !Ref apiHost
#        basePath: !Sub "/${apiBasePath}"
#        schemes:
#          - "https"
#        paths:
#          /:
#            post:
#              responses: {}
#              security:
#                - api_key: []
#              x-amazon-apigateway-integration:
#                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
#                passthroughBehavior: "when_no_match"
#                httpMethod: "POST"
#                type: "aws_proxy"
#        securityDefinitions:
#          api_key:
#            type: "apiKey"
#            name: "x-api-key"
#            in: "header"
#
#  ApiGatewayUsagePlan:
#    Type: AWS::ApiGateway::UsagePlan
#    Properties:
#      UsagePlanName: ddns
#      Description: !Sub ${AppName} Usage Plan
#      Quota:
#        Limit: 500
#        Period: DAY
#      Throttle:
#        BurstLimit: 20
#        RateLimit: 10
#
#  ApiGatewayMapping:
#    Type: AWS::ApiGateway::BasePathMapping
#    Properties:
#      BasePath: !Ref apiBasePath
#      DomainName: !Ref apiHost
#      RestApiId: !Ref ApiGateway
#      Stage: Prod
